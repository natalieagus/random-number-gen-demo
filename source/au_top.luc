module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  pn_gen random_number_generator(.clk(clk), .rst(rst));
  pn_gen second_random_number_generator(.clk(clk), .rst(rst));
  counter slowclock(#SIZE(32), .clk(clk),  .rst(rst));
  edge_detector slowclock_edge(#RISE(1), #FALL(0), .clk(clk));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    edge_detector edge_detector (#RISE(1), #FALL(0));
    
    .rst(rst) {
      multi_seven_seg seg;
      multi_dec_ctr dec_ctr;
      counter ctr (#SIZE(1), #DIV(24));
    }
  }
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    io_led = 3x{{8b0}};
    
    led = c{3b0, io_button};  // connect buttons to LEDs
    
    usb_tx = usb_rx;          // loop serial port
    
    edge_detector.in = ctr.value;
    dec_ctr.inc = edge_detector.out;
   
    
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
    
    slowclock_edge.in = slowclock.value[27]; // store the edge 
    io_led[2][7] = slowclock.value[27]; // view the slowclock signal 
    random_number_generator.next = b1; // always high, will produce one value every FPGA clock cycle 
    random_number_generator.seed = 32hABC; // now hardcoded value 

    
    second_random_number_generator.next = slowclock_edge.out; 
    second_random_number_generator.seed = c{24hABCDEF, io_dip[2]};
    
    if (io_dip[0][0]){
        // this is going to flicker so fast you won't be able to see it
        io_led[1:0] = {random_number_generator.num[15:8], random_number_generator.num[7:0]};
        seg.values = {random_number_generator.num[15:12],random_number_generator.num[11:8], random_number_generator.num[7:4], random_number_generator.num[3:0]};
    }
    else{
        io_led[1:0] = {second_random_number_generator.num[15:8], second_random_number_generator.num[7:0]};
        seg.values = {second_random_number_generator.num[15:12],second_random_number_generator.num[11:8], second_random_number_generator.num[7:4], second_random_number_generator.num[3:0]};
    }
    
    
  }
}